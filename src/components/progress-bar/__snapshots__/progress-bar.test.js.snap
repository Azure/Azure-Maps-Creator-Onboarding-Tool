// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Progress Bar component should not render component 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div />
  </body>,
  "container": <div />,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Progress Bar component should render component 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": .emotion-0 {
  max-width: 31.25rem;
  margin: 0.9375rem 0;
}

.emotion-1 {
  margin-bottom: 1.875rem;
}

.emotion-2 {
  font-size: 0.875rem;
  height: 2.25rem;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin-right: 1rem;
  -webkit-text-decoration: none;
  text-decoration: none;
  color: inherit;
  font-weight: 600;
  border-bottom: 2px solid #0078d4;
}

.emotion-2:hover {
  color: inherit;
}

.emotion-3 {
  color: #E1DFDD;
  font-size: 1rem;
  margin-right: 0.5rem;
}

.emotion-4 {
  font-size: 0.875rem;
  height: 2.25rem;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin-right: 1rem;
  -webkit-text-decoration: none;
  text-decoration: none;
  color: inherit;
}

.emotion-4:hover {
  color: inherit;
}

<body>
    <div>
      <div
        class="emotion-0"
      />
      <div
        class="emotion-1"
      >
        <button
          aria-disabled="true"
          class="ms-Button ms-Button--action ms-Button--command is-disabled emotion-2 root-109"
          data-is-focusable="false"
          disabled=""
          type="button"
        >
          <span
            class="ms-Button-flexContainer flexContainer-110"
            data-automationid="splitbuttonprimary"
          >
            <i
              aria-label="building.levels"
              class="emotion-3 root-119"
              data-icon-name="SkypeCircleCheck"
              role="img"
            >
              
            </i>
            building.levels
          </span>
        </button>
        <button
          class="ms-Button ms-Button--action ms-Button--command emotion-4 root-120"
          data-is-focusable="true"
          type="button"
        >
          <span
            class="ms-Button-flexContainer flexContainer-110"
            data-automationid="splitbuttonprimary"
          >
            <i
              aria-label="dwg.layers"
              class="emotion-3 root-119"
              data-icon-name="SkypeCircleCheck"
              role="img"
            >
              
            </i>
            dwg.layers
          </span>
        </button>
        <button
          class="ms-Button ms-Button--action ms-Button--command emotion-4 root-120"
          data-is-focusable="true"
          type="button"
        >
          <span
            class="ms-Button-flexContainer flexContainer-110"
            data-automationid="splitbuttonprimary"
          >
            <i
              aria-label="georeference"
              class="emotion-3 root-119"
              data-icon-name="SkypeCircleCheck"
              role="img"
            >
              
            </i>
            georeference
          </span>
        </button>
      </div>
    </div>
  </body>,
  "container": .emotion-0 {
  max-width: 31.25rem;
  margin: 0.9375rem 0;
}

.emotion-1 {
  margin-bottom: 1.875rem;
}

.emotion-2 {
  font-size: 0.875rem;
  height: 2.25rem;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin-right: 1rem;
  -webkit-text-decoration: none;
  text-decoration: none;
  color: inherit;
  font-weight: 600;
  border-bottom: 2px solid #0078d4;
}

.emotion-2:hover {
  color: inherit;
}

.emotion-3 {
  color: #E1DFDD;
  font-size: 1rem;
  margin-right: 0.5rem;
}

.emotion-4 {
  font-size: 0.875rem;
  height: 2.25rem;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin-right: 1rem;
  -webkit-text-decoration: none;
  text-decoration: none;
  color: inherit;
}

.emotion-4:hover {
  color: inherit;
}

<div>
    <div
      class="emotion-0"
    />
    <div
      class="emotion-1"
    >
      <button
        aria-disabled="true"
        class="ms-Button ms-Button--action ms-Button--command is-disabled emotion-2 root-109"
        data-is-focusable="false"
        disabled=""
        type="button"
      >
        <span
          class="ms-Button-flexContainer flexContainer-110"
          data-automationid="splitbuttonprimary"
        >
          <i
            aria-label="building.levels"
            class="emotion-3 root-119"
            data-icon-name="SkypeCircleCheck"
            role="img"
          >
            
          </i>
          building.levels
        </span>
      </button>
      <button
        class="ms-Button ms-Button--action ms-Button--command emotion-4 root-120"
        data-is-focusable="true"
        type="button"
      >
        <span
          class="ms-Button-flexContainer flexContainer-110"
          data-automationid="splitbuttonprimary"
        >
          <i
            aria-label="dwg.layers"
            class="emotion-3 root-119"
            data-icon-name="SkypeCircleCheck"
            role="img"
          >
            
          </i>
          dwg.layers
        </span>
      </button>
      <button
        class="ms-Button ms-Button--action ms-Button--command emotion-4 root-120"
        data-is-focusable="true"
        type="button"
      >
        <span
          class="ms-Button-flexContainer flexContainer-110"
          data-automationid="splitbuttonprimary"
        >
          <i
            aria-label="georeference"
            class="emotion-3 root-119"
            data-icon-name="SkypeCircleCheck"
            role="img"
          >
            
          </i>
          georeference
        </span>
      </button>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
